// Mocks generated by Mockito 5.4.4 from annotations
// in mad_test_work/test/camera_feature/domain/use_cases/get_places_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:dartz/dartz.dart' as _i4;
import 'package:mad_test_work/core/failtures/failures.dart' as _i8;
import 'package:mad_test_work/src/camera_feature/data/data_source/local_data_source/places_data_source_local_interface.dart'
    as _i2;
import 'package:mad_test_work/src/camera_feature/data/data_source/remote_data_source/places_data_source_remote_interface.dart'
    as _i3;
import 'package:mad_test_work/src/camera_feature/domain/place/place_model.dart'
    as _i7;
import 'package:mad_test_work/src/camera_feature/domain/repository/places_repository_interface.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeIPlacesDataSourceLocal_0 extends _i1.SmartFake
    implements _i2.IPlacesDataSourceLocal {
  _FakeIPlacesDataSourceLocal_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIPlacesDataSourceRemote_1 extends _i1.SmartFake
    implements _i3.IPlacesDataSourceRemote {
  _FakeIPlacesDataSourceRemote_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [IPlacesRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPlacesRepository extends _i1.Mock implements _i5.IPlacesRepository {
  MockIPlacesRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.IPlacesDataSourceLocal get placesDataSourceLocal => (super.noSuchMethod(
        Invocation.getter(#placesDataSourceLocal),
        returnValue: _FakeIPlacesDataSourceLocal_0(
          this,
          Invocation.getter(#placesDataSourceLocal),
        ),
      ) as _i2.IPlacesDataSourceLocal);

  @override
  _i3.IPlacesDataSourceRemote get placesDataSourceRemote => (super.noSuchMethod(
        Invocation.getter(#placesDataSourceRemote),
        returnValue: _FakeIPlacesDataSourceRemote_1(
          this,
          Invocation.getter(#placesDataSourceRemote),
        ),
      ) as _i3.IPlacesDataSourceRemote);

  @override
  _i6.Future<_i4.Either<List<_i7.PlaceModel>, _i8.Failure>> getPlaces() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlaces,
          [],
        ),
        returnValue:
            _i6.Future<_i4.Either<List<_i7.PlaceModel>, _i8.Failure>>.value(
                _FakeEither_2<List<_i7.PlaceModel>, _i8.Failure>(
          this,
          Invocation.method(
            #getPlaces,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<List<_i7.PlaceModel>, _i8.Failure>>);
}
