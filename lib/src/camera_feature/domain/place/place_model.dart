import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:mad_test_work/src/camera_feature/domain/place/photo_point.dart';
import 'package:mad_test_work/src/camera_feature/domain/place/place.dart';
// required: associates our `main.dart` with the code generated by Freezed
part 'place_model.freezed.dart';

/// Represents a place model, containing information about a place such as its title, total points, remaining points, and a list of photo points.
///
/// The `PlaceModel` class is a freezed class, which means it is immutable and has a factory constructor that creates instances of the class.
///
/// The `fromJson` factory constructor takes a `Map<String, dynamic>` and creates a `PlaceModel` instance from the JSON data. 
/// It handles cases where the JSON data may be missing or have invalid values, providing default values where appropriate.

@freezed
class PlaceModel with _$PlaceModel {
  const factory PlaceModel(
    Place place,
  ) = _PlaceModel;

  factory PlaceModel.fromJson(Map<String, dynamic> json) {
    final String title = json.containsKey('title') && json['title'] is String
        ? json['title']
        : ' Error here!';
    final int totalPoints = json.containsKey('total_points_count') &&
            json['total_points_count'] is int
        ? json['total_points_count']
        : 0;
    final int remainingPoints =
        json.containsKey('remaining_points') && json['remaining_points'] is int
            ? json['remaining_points']
            : 0;
    final List<dynamic> points =
        json.containsKey('points') ? json['points'] : [];

    final decodedPoints = points
        .map((e) => PhotoPoint.fromJson(e as Map<String, dynamic>))
        .toList();
    final place = Place(
      title: title,
      totalPoints: totalPoints,
      remainingPoints: remainingPoints,
      points: decodedPoints,
    );
    return PlaceModel(place);
  }
}
